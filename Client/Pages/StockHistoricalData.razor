@page "/stocks/{ticker}/history"
@inject IStockDataService StockDataService
@inject NavigationManager NavigationManager

<h3>Historical Data for @Ticker</h3>

<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800" />
</div>



@code {
    [Parameter]
    public string Ticker { get; set; }
    private List<DailyPrice> dailyPrices = new();
    private List<string> labels = new();
    private List<double?> closingPrices = new();

    private HistoricalStockData? HistoricalStockData;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private bool gotData = false;

// TODO: cache the data in localstorage so that we dont have to make api call everytime we load the page (helps minimize number of api calls per day)
    protected override async Task OnInitializedAsync()
    {
        //Console.WriteLine("OnInitializedAsync");
        // Replace with actual service call to fetch historical data
        HistoricalStockData = await StockDataService.GetStockHistoricalData(Ticker);
        Console.WriteLine(HistoricalStockData);
        
        foreach (var entry in HistoricalStockData?.DailyPrices ?? [])
        {
            var date = entry.Key;
            var year = DateOnly.Parse(date).Year;
            var month = DateOnly.Parse(date).Month;
            var day = DateOnly.Parse(date).Day;
            
            if (DateOnly.Parse(date).Year != DateTime.Now.Year)
            {
                continue;
            }

            var dailyPrice = entry.Value;
            //Console.WriteLine(date);
            //Console.WriteLine(dailyPrice.AdjustedClose);
            dailyPrices.Add(dailyPrice);
            //labels.Add(date);
            closingPrices.Add((double) dailyPrice.AdjustedClose);
            Console.WriteLine(date);
        }

        closingPrices.ForEach(cp=>Console.WriteLine(cp));
        // json comes in backwards so we reverse it to match the labeling
        closingPrices.Reverse();


        var colors = ColorUtility.CategoricalTwelveColors;

        var labels = new List<string> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        var datasets = new List<IChartDataset>();

        var tickerDataSet = new LineChartDataset
            {
                Label = Ticker,
                Data = closingPrices,
                BackgroundColor = colors[0],
                BorderColor = colors[0],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                // PointBackgroundColor = colors[0],
                // PointRadius = 0, // hide points
                // PointHoverRadius = 4,
            };
        datasets.Add(tickerDataSet);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = DateTime.Now.Year.ToString(), Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Dollars per Share", Display = true };
        //lineChartOptions.Scales.Y!.Max = 5000;

        lineChartOptions.Plugins.Title!.Text = "Stock Historical Progress";
        lineChartOptions.Plugins.Title.Display = true;

        gotData = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && gotData)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
