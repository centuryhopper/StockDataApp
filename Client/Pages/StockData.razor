@page "/stock-data"
@inject IStockDataService StockDataService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles="Admin,Normal_User")]

<h3>Real-Time Stock Data</h3>

<form @onsubmit="FetchStockData">
    <div class="form-group">
        <label for="tickerInput" class="m-3">Enter Ticker Symbol:</label>
        <input type="text" maxlength="4" class="form-control" id="tickerInput" style="text-transform: uppercase;" @bind="inputTicker"
            placeholder="E.g., AAPL, MSFT" />
    </div>
    <button type="submit" class="btn btn-primary mt-3 mb-3">Get Real-Time Data</button>
</form>

@if (stockRealTimeInfo is not null)
{
    <div class="m-5">
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">
                    @InputTicker
                </h5>
                <p class="card-text">
                    <strong>Current:</strong> @stockRealTimeInfo.CurrentPrice<br />
                    <strong>Change:</strong> @stockRealTimeInfo.Change<br />
                    <strong>Percent Change:</strong> @stockRealTimeInfo.PercentChange<br />
                
                    <strong>Open:</strong> @stockRealTimeInfo.Open<br />
                    <strong>Previous Close:</strong> @stockRealTimeInfo.PreviousClose<br />
                    <strong>High:</strong> @stockRealTimeInfo.High<br />
                    <strong>Low:</strong> @stockRealTimeInfo.Low
                </p>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="()=>SaveStockData()">Save</button>
    <button class="btn btn-danger" @onclick="()=>ResetSearch()">Reset</button>
}

@if (stocks == null || !stocks.Any())
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (var stock in stocks)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="#" @onclick="() => NavigateToHistoricalData(stock.TickerSymbol)">
                                @stock.TickerSymbol
                            </a>
                        </h5>
                        <p class="card-text">
                            <strong>Open:</strong> @stock.OpenPrice<br />
                            <strong>Close:</strong> @stock.ClosePrice<br />
                            <strong>Previous Close:</strong> @stock.PreviousClose<br />
                            <strong>High:</strong> @stock.HighPrice<br />
                            <strong>Low:</strong> @stock.LowPrice
                        </p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <Tooltip Title="Sync with Real-Time Data">
                            <button class="btn btn-secondary" @onclick="()=>HandleUpdate(stock.TickerSymbol)">Sync</button>
                        </Tooltip>
                        <div style="width: 2rem;"></div>
                        <button class="btn btn-danger" @onclick="()=>HandleDelete(stock.StockDataId)">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<ConfirmModal @ref="confirmModal"
    Title="Delete Confirmation"
    BodyText="Are you sure you want to delete this item?" />



@code {
    private IEnumerable<StockDataDTO> stocks;
    private int appUserId { get; set; }
    private string inputTicker { get; set; } = string.Empty;
    private string InputTicker
    {
        get => inputTicker.ToUpper(); // return uppercase for the bound value
    }

    private string sessionTicker { get; set; }
    private StockRealTimeInfo? stockRealTimeInfo { get; set; } = null;
    private ConfirmModal confirmModal = default!;


    protected override async Task OnInitializedAsync()
    {
        stocks = await StockDataService.GetStockData();

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;
        appUserId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
    }

    private async Task HandleDelete(int stockDataId)
    {
        // TODO: add warning before delete
        var confirmed = await confirmModal!.ShowAsync();
        Console.WriteLine(confirmed);
        //var response = await StockDataService.DeleteStockData(stockDataId);
        //if (response.Flag)
        //{
        //    NavigationManager.NavigateTo("refresh/stock-data");
        //}
        
    }

    private async Task HandleUpdate(string tickerSymbol)
    {
        var realTimeInfo = await StockDataService.GetStockRealTimeData(tickerSymbol.Trim());
        
        // convert stockrealtimeinfo to stockDataDTO
        var response = await StockDataService.UpdateStockData(tickerSymbol.Trim(), realTimeInfo);
        if (response.Flag)
        {
            NavigationManager.NavigateTo("refresh/stock-data");
        }
    }

    private async Task SaveStockData()
    {
        if (stockRealTimeInfo is not null)
        {
            var response = await StockDataService.SaveStockData(new StockDataDTO {
                Userid = appUserId
                ,TickerSymbol = InputTicker
                ,OpenPrice = stockRealTimeInfo.Open
                ,ClosePrice = null
                ,HighPrice = stockRealTimeInfo.High
                ,LowPrice = stockRealTimeInfo.Low
                ,DateCreated = DateOnly.FromDateTime(DateTime.Now)
                ,CurrentPrice = stockRealTimeInfo.CurrentPrice
                ,Change = stockRealTimeInfo.Change
                ,PercentChange = stockRealTimeInfo.PercentChange
                ,PreviousClose = stockRealTimeInfo.PreviousClose
            });

            if (response.Flag)
            {
                ResetSearch();
                stocks = await StockDataService.GetStockData();
            }
        }
    }
    
    private void ResetSearch()
    {
        inputTicker = "";
        sessionTicker = "";
        stockRealTimeInfo = null;
    }
    private async Task FetchStockData()
    {
        if (!string.IsNullOrWhiteSpace(InputTicker))
        {
            stockRealTimeInfo = await StockDataService.GetStockRealTimeData(InputTicker.Trim());
            sessionTicker = InputTicker;
        }
    }

    private void NavigateToHistoricalData(string ticker)
    {
        NavigationManager.NavigateTo($"stocks/{ticker}/history", forceLoad: true);
    }
}
