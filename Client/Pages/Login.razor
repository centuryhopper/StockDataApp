@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@inject IAccountService accountService
@inject NavigationManager NavigationManager

<h3>Login</h3>

<EditForm Model="@loginDTO" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginDTO.Email" />
        <ValidationMessage For="@(() => loginDTO.Email)" />
    </div>

    <div class="form-group mt-3">
        <label for="password">Password</label>
        <div class="input-group" id="show_hide_password">
            <InputText id="password" class="form-control" @bind-Value="loginDTO.Password" type="@passwordType" />
            <div class="input-group-append">
                <div class="input-group-addon">
                    <span class="input-group-text">
                        <a @onclick="TogglePasswordVisibility" style="color: black; cursor: pointer;"><i class="fa @iconClass field-icon m-1" aria-hidden="true"></i></a>
                    </span>
                </div>
            </div>
        </div>
        <ValidationMessage For="@(() => loginDTO.Password)" />
    </div>

    <div class="form-group form-check mt-1">
        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginDTO.RememberMe" />
        <label class="form-check-label" for="rememberMe">Remember me</label>
    </div>

    <button disabled="@Loading" class="btn btn-primary">Login</button>
    @if (Loading)
    {
        <span class="spinner-border spinner-border-sm"></span>
    }
</EditForm>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private LoginDTO loginDTO = new();
    private bool isPasswordVisible = false;
    private string passwordType => isPasswordVisible ? "text" : "password";
    private string iconClass => isPasswordVisible ? "fa-eye" : "fa-eye-slash";
    private bool Loading = false;

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    protected override async Task OnInitializedAsync()
    {
        //await jsRuntime.InvokeVoidAsync("showHidePasswordField", "show_hide_password");
    }

    private async Task HandleSubmit()
    {
        // Handle login logic here
        var response = await accountService.LoginAsync(loginDTO);

        if (!response.Flag)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(PopupDialog.Message), response.Message);
            Modal.Show<PopupDialog>("Error", parameters);
            return;
        }

        NavigationManager.NavigateTo("parsed-claims", true);
    }

}
